import numpy as np
import math
import time

class Vehicle:
    """
    Gère l'état et le comportement du véhicule (position,
    orientation, détection d'obstacles via LIDAR).
    """
    def __init__(self, initial_position, Vit_linear,
                 Vit_angular_right, Vit_angular_left,
                 stop_distance, lidar_update_period,
                 map_image, pixel_to_meter=0.01055):
        self.position = np.array(initial_position, dtype=np.float64)
        self.orientation = 0.0  # radians
        self.fixed_linear_speed = Vit_linear
        self.fixed_angular_right = Vit_angular_right
        self.fixed_angular_left = Vit_angular_left
        self.stop_distance = stop_distance
        self.lidar_update_period = lidar_update_period
        self.map_image = map_image
        self.pixel_to_meter = pixel_to_meter
        self.last_lidar_update = time.time()
        self.sensor_data = {'lidar': [], 'speed': Vit_linear}
        self.trajectory = [self.position.copy()]
        self.obstacle_right_detected = False
        self.obstacle_left_detected = False

    def update_sensors(self):
        current_time = time.time()
        if current_time - self.last_lidar_update < self.lidar_update_period:
            return
        self.sensor_data['lidar'] = self.simulate_lidar()
        self.last_lidar_update = current_time
        self.obstacle_right_detected = False
        self.obstacle_left_detected = False
        front_right, front_left = [], []
        for px, py, dist in self.sensor_data['lidar']:
            angle = math.atan2(py - self.position[1], px - self.position[0])
            angle_deg = math.degrees(angle - self.orientation)
            angle_deg = (angle_deg + 180) % 360 - 180
            if -15 <= angle_deg <= -5:
                front_right.append(dist)
            elif 5 <= angle_deg <= 15:
                front_left.append(dist)
        if front_right and min(front_right) < self.stop_distance:
            self.obstacle_right_detected = True
        if front_left and min(front_left) < self.stop_distance:
            self.obstacle_left_detected = True 

    def move(self, dt):
        self.update_sensors()
        linear = self.fixed_linear_speed
        angular = 0.0
        if self.obstacle_right_detected:
            angular = self.fixed_angular_right
        elif self.obstacle_left_detected:
            angular = self.fixed_angular_left
        self.orientation = (self.orientation + angular * dt + math.pi) % (2*math.pi) - math.pi
        vpx = linear / self.pixel_to_meter
        dx = vpx * math.cos(self.orientation) * dt
        dy = vpx * math.sin(self.orientation) * dt
        self.position += np.array([dx, dy])
        self.trajectory.append(self.position.copy())
        return not self.is_out_of_bounds()

 
