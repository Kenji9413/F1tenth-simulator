import numpy as np
import time
from vehicle import Vehicle
import matplotlib.colors as mcolors
import matplotlib.cm as cm
import math

class Simulator:
    """
    Gère la boucle de simulation, la détection des tours et l'affichage.
    """
    def __init__(self, map_image, initial_position,
                 Vit_linear, Vit_angular_right, Vit_angular_left,
                 stop_distance, lidar_update_period, dt=0.1):
        self.map_image = map_image
        self.dt = dt
        self.sim_time = 0.0
        self.start_time = None
        self.lap_time = None
        self.vehicle = Vehicle(
            initial_position, Vit_linear,
            Vit_angular_right, Vit_angular_left,
            stop_distance, lidar_update_period,
            map_image
        )
        self.start_pos = self.vehicle.position.copy()
        self.lap_in_progress = False
        self.lap_start_time = 0.0
        self.lap_count = 0
        self.lap_times = []

    def step(self):
        if not self.vehicle.move(self.dt):
            return False
        self.sim_time += self.dt
        self._check_lap()
        return True

    def _check_lap(self):
        dx = abs(self.vehicle.position[0] - self.start_pos[0])
        dy = abs(self.vehicle.position[1] - self.start_pos[1])
        thr_x, thr_y = 30, 50
        if self.lap_in_progress:
            if dx < thr_x and dy < thr_y:
                self.lap_time = time.time() - self.start_time
                self.lap_times.append(self.lap_time)
                self.lap_count += 1
                self.lap_in_progress = False
        else:
            if dx > 2*thr_x or dy > 2*thr_y:
                self.lap_in_progress = True
                self.start_time = time.time()

    def get_lap_time(self):
        return self.lap_time

    def render(self, ax, global_count):
        ax.clear()
        ax.imshow(self.map_image, cmap='gray')
        # Véhicule
        ax.scatter(*self.vehicle.position, color='red', s=100, label='Véhicule')
        # Trajectoire
        traj = np.array(self.vehicle.trajectory)
        if traj.shape[0] > 1:
            ax.plot(traj[:,0], traj[:,1], color='blue', linewidth=2, alpha=0.6)
        # LIDAR
        if self.vehicle.sensor_data['lidar']:
            xs, ys, ds = zip(*self.vehicle.sensor_data['lidar'])
            norm = mcolors.Normalize(vmin=min(ds), vmax=max(ds))
            cols = cm.plasma_r(norm(ds))
            ax.scatter(xs, ys, c=cols, s=10, marker='o', alpha=0.8, label='Lidar')
        ax.legend()
        ax.set_xlim(0, self.map_image.shape[1])
        ax.set_ylim(self.map_image.shape[0], 0)
        ax.set_title(f"Pos: [{self.vehicle.position[0]:.2f}, {self.vehicle.position[1]:.2f}] | "
                      f"V lin: {self.vehicle.fixed_linear_speed:.2f} m/s | Tours: {global_count}")


    def simulate_lidar(self):
        max_range_px = int(35 / self.vehicle.pixel_to_meter)
        x0, y0 = self.vehicle.position.astype(int)
        points = []
        for angle in np.linspace(0, 2 * math.pi, 360, endpoint=False):
            hit = False
            for d in range(1, max_range_px + 1):
                cx = int(x0 + math.cos(angle) * d)
                cy = int(y0 + math.sin(angle) * d)
                if not (0 <= cx < self.map_image.shape[1] and 0 <= cy < self.map_image.shape[0]):
                    break
                if self.map_image[cy, cx] == 0:
                    points.append((cx, cy, d * self.vehicle.pixel_to_meter))
                    hit = True
                    break
            if not hit:
                points.append((x0 + math.cos(angle)*max_range_px,
                               y0 + math.sin(angle)*max_range_px,
                               max_range_px * self.vehicle.pixel_to_meter))
        return points


    def is_out_of_bounds(self):
        x, y = int(self.vehicle.position[0]), int(self.vehicle.position[1])
        if not (0 <= x < self.map_image.shape[1] and 0 <= y < self.map_image.shape[0]):
            return True
        return self.map_image[y, x] == 0


  


  
