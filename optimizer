import numpy as np
from scipy.optimize import minimize

class Optimizer:
    """
    Encapsule l'appel à Nelder–Mead : prend x0 et optimise une fonction objectif.
    """
    def __init__(self, x0):
        self.x0 = x0

    def optimize(self, objective, maxiter=10):
        result = minimize(
            objective, self.x0,
            method='Nelder-Mead',
            options={'maxiter': maxiter, 'maxfev': maxiter, 'disp': True}
        )
        best = np.clip(
            result.x,
            [0.1, 1.5, -3.0, 0.5, 0.025],
            [1.0, 3.0, -1.5, 1.5, 0.1]
        )
        print("\n=== Résultats de l'optimisation ===")
        print(
            f"Vit_linear: {best[0]:.3f}\n"
            f"Vit_angular_right: {best[1]:.3f}\n"
            f"Vit_angular_left: {best[2]:.3f}\n"
            f"stop_distance: {best[3]:.3f}\n"
            f"lidar_update_period: {best[4]:.3f}\n"
            f"lap_time: {result.fun:.2f}"
        )
        return np.append(best, result.fun)
